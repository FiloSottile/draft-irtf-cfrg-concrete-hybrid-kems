{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-09-18T01:23:49.250343+00:00",
  "repo": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOMmh5WM641BZ1",
      "title": "concrete instance of 'prehash' generic scheme?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/2",
      "state": "CLOSED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-29T16:49:10Z",
      "updatedAt": "2025-06-28T22:02:57Z",
      "closedAt": "2025-06-28T22:02:57Z",
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of the more general #9 ",
          "createdAt": "2025-06-28T22:02:57Z",
          "updatedAt": "2025-06-28T22:02:57Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOMmh5WM69TN29",
      "title": "port over support for curves from generic document that they meet nominal group requirements ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/6",
      "state": "OPEN",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-25T14:42:40Z",
      "updatedAt": "2025-06-25T14:42:40Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 9,
      "id": "I_kwDOMmh5WM693yJc",
      "title": "Additional concrete instances",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/9",
      "state": "OPEN",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The document currently defines three concrete hybrid KEMs.  All of these hybrid KEMs are based on ML-KEM, and all of them use the QSF generic framework.\n\nOn the one hand, it could be helpful to define additional concrete hybrid KEMs to demonstrate when the other frameworks would be preferred.  For example:\n\n* A X25519 + Classic McEleice combination, for use in an environment where public keys are reused, would provide a case where PRE is clearly superior to GHP, since Classic McEliece does not have C2PRI, but does have giant public keys.\n* An RSA-OAEP + HQC combination would show the need for GHP, since RSA-OAEP is not a nominal group, and HQC does not have C2PRI resistance, but HQC keys are not big enough for pre-hashing to provide a significant advantage.\n\nOn the other hand, we should not create concrete hybrid KEMs that nobody is going to use.  If there is not a requirement by applications for all of the frameworks in the generic document, we could remove any frameworks that are not needed.\n",
      "createdAt": "2025-06-28T22:02:23Z",
      "updatedAt": "2025-07-20T23:56:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "> Classic McEliece does not have C2PRI\n\n>  HQC does not have C2PRI resistance\n\nDo you have a reference for those claims?",
          "createdAt": "2025-06-30T10:02:17Z",
          "updatedAt": "2025-06-30T10:02:17Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "I do not.  I thought that I had heard people claim that on the CFRG mailing list.",
          "createdAt": "2025-06-30T12:50:43Z",
          "updatedAt": "2025-06-30T12:50:43Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "NONE",
          "body": "The reason HQC does not trivially have C2PIR is that it does not hash the 16-byte salt into shared secret (it does hash in all the other parts of the ciphertext).\n\nHowever, not hashing that in causes other trouble as well (e.g., an oracle that tells if a ciphertext is valid or not), so I would not be surprised if that would get changed in standardization. And I think explicitly rejecting variant of HQC is C2PIR (changing the salt really screws with the re-encryption).\n\nAs for Classic McEliece, there are papers finding weird and unexpected behavior, so best not to assume anything beyond IND-CCA.\n\nAs for RSA-OEAP, QSF security proof can be extended to cover that too. However, the RSA public keys are annoying.",
          "createdAt": "2025-07-20T14:27:27Z",
          "updatedAt": "2025-07-20T14:27:27Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> The reason HQC does not trivially have C2PIR is that it does not hash the 16-byte salt into shared secret (it does hash in all the other parts of the ciphertext).\n> \n> However, not hashing that in causes other trouble as well (e.g., an oracle that tells if a ciphertext is valid or not), so I would not be surprised if that would get changed in standardization. And I think explicitly rejecting variant of HQC is C2PIR (changing the salt really screws with the re-encryption).\n\n\nCorrect; the HQC team has stated they intend to fix the PKE salt hashing as part of turning the fourth round submission version into an IPD, so we'll see if that lands to affect these properties\n\n",
          "createdAt": "2025-07-20T23:55:53Z",
          "updatedAt": "2025-07-20T23:56:05Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOMmh5WM6-Gop1",
      "title": "Update instance `Decaps()`'s to match seed expansion in -generic",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/10",
      "state": "OPEN",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "Depends on https://github.com/cfrg/draft-irtf-cfrg-hybrid-kems/issues/58",
      "createdAt": "2025-06-30T18:06:32Z",
      "updatedAt": "2025-06-30T18:07:34Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 11,
      "id": "I_kwDOMmh5WM6-Go7N",
      "title": "Update implementation and test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/11",
      "state": "OPEN",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-30T18:07:02Z",
      "updatedAt": "2025-06-30T18:07:13Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOMmh5WM6-GpgZ",
      "title": "Update I-D pseudocode",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/12",
      "state": "OPEN",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "dconnolly"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-30T18:08:06Z",
      "updatedAt": "2025-06-30T18:08:06Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 14,
      "id": "I_kwDOMmh5WM7BteZD",
      "title": "Bug in details for QSF-MLKEM1024-P384-SHA3256-SHAKE256",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/14",
      "state": "CLOSED",
      "author": "samuel-lee-msft",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Current code has the following:\nhttps://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/blob/4f6ce977f57a54c51d5814f76a2b48dfb3bb4ce8/draft-irtf-cfrg-concrete-hybrid-kems.md?plain=1#L329-L337\n\nThe name and label of the concrete instantiation refer to \"SHA3256\", but the specified KDF is HKDF-SHA-256, _not_ SHA3-256.\n\nI suspect the intent is that the KDF is SHA3-256 for this concrete instantiation?",
      "createdAt": "2025-07-21T20:19:45Z",
      "updatedAt": "2025-08-31T00:21:03Z",
      "closedAt": "2025-08-31T00:21:03Z",
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes that HKDF mention is detritus from earlier drafts. All concrete instances use SHA3 as the hybrid KEM KDF. Will fix.",
          "createdAt": "2025-08-30T00:17:01Z",
          "updatedAt": "2025-08-30T00:17:01Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOMmh5WM7HibUX",
      "title": "Suspect RandomScalar impl for P256/P384 in ref-impl",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/18",
      "state": "OPEN",
      "author": "ilaril",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "According to the document, RandomScalar for P-256/P-384 reduces \"modulo the group order\".\n\nHowever, for P-256 that seems to be implemented in `<P256Scalar as From<&[u8]>>::from()` in `reference-implementation/src/groups/p256.rs`, which seems use modulus `ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff`, which is the P-256 base field size, not group order (Safecurves gives `ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551` as the group order)\n\nP-384 seems to have analogous issue: P-384 implementation seems to be `<P384Scalar as From<&[u8]>>::from()` in `reference-implementation/src/groups/p384.rs`, which seems to use modulus `ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff`, which is the P-384 base field size, not group order (Safecurves gives `ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973` as the group order).\n\nEdit: Changing the moduli does give something that is interoperable with my own implementation.",
      "createdAt": "2025-08-23T07:01:32Z",
      "updatedAt": "2025-09-01T22:03:42Z",
      "closedAt": null,
      "comments": [
        {
          "author": "FiloSottile",
          "authorAssociation": "NONE",
          "body": "Fixed by #21",
          "createdAt": "2025-09-01T22:03:42Z",
          "updatedAt": "2025-09-01T22:03:42Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOMmh5WM7Ix0sU",
      "title": "The P-384 hybrid construction has Nss=32, but RFC 9180's P-384 construction has Nsecret=48",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/19",
      "state": "CLOSED",
      "author": "bluegate010",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Is that a bug or intentional?",
      "createdAt": "2025-08-29T23:57:32Z",
      "updatedAt": "2025-08-30T00:13:38Z",
      "closedAt": "2025-08-30T00:12:59Z",
      "comments": [
        {
          "author": "bluegate010",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Same question for the pure ML-KEM-1024 construction, which also uses Nss=32.",
          "createdAt": "2025-08-30T00:04:34Z",
          "updatedAt": "2025-08-30T00:04:34Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "Nss for all concrete hybrids is 32 bytes as the current draft uses SHA3 as the KDF for all instances ",
          "createdAt": "2025-08-30T00:13:38Z",
          "updatedAt": "2025-08-30T00:13:38Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOMmh5WM7JGPsj",
      "title": "Avoid wide reduction in P-256 and P-384 RandomScalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/22",
      "state": "OPEN",
      "author": "FiloSottile",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Currently, an implementation of P-256 and P-384 QSF hybrids needs a wide reduction implementation to reduce a 48 or 72 byte value to a scalar. This is not obviously available in implementations.\n\nNote that when used in HPKE this is also inconsistent with how pure P-256 and P-384 keys are derived in DHKEM, which uses rejection sampling in DeriveKeyPair (RFC 9180 Section 7.1.3).\n\nI think there are arguments both for rejection sampling and for wide reduction, but having *both* in a HPKE implementation for the same curve is annoying. Since rejection sampling is fixed in RFC 9180, I suggest we change RandomScalar in this draft.\n\nNormally, the annoyance of rejection sampling is introducing a XOF or DRBG or KDF or whatever, which DHKEM solves with a built-in KDF, but here the RandomScalar input is already an arbitrary sized uniform PRG output from expandDecapsulationKey, so we can just request a \"seed\" which is wide enough to bring the probability of rejection down to the security level.\n\nFor P-256, that means a Nseed of 128, since the probability of rejection is [< 2\u207b\u00b3\u00b2](https://www.wolframalpha.com/input?i=log2%281+-+115792089210356248762697446949407573529996955224135760342422259061068512044369+%2F+2%5E256%29) and the security level is 128 bits-ish.\n\nThe RandomScalar algorithm would be to try seed[:32] and return it if < q, otherwise try seed[32:64], otherwise seed[64:96], otherwise seed[96:], otherwise fatal.\n\nFor P-384, that means Nseed of 48, since the probability of even a single rejection is [< 2\u207b\u00b9\u2079\u2074](https://www.wolframalpha.com/input?i=log2%281+-+39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643+%2F+2%5E384%29).\n\nWe will need to specify that the RandomScalar input needs to be uniformly distributed, but since it's only ever a PRG output, I don't expect that will be a problem.\n\nWhat do folks think?",
      "createdAt": "2025-09-01T22:17:39Z",
      "updatedAt": "2025-09-18T01:06:50Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": ">  This is not obviously available in implementations.\n\nGiven a 48 byte scalar s, split it as `s = a 2^256 + b`, where `b<2^256`. Clearly `s mod p = ((a mod p) (2^256 mod p) + (b mod p) mod p)`. Hardcoding (2^256 mod p), you only need the existing reduction, multiplication, addition and splitting. I'd say this is not too hard at all, and easier to test than rejection sampling.\n\n> I think there are arguments both for rejection sampling and for wide reduction, but having both in a HPKE implementation for the same curve is annoying. \n\nIt's ideal to stick to one method of sampling a scalar. That also means that having two different ways to do rejection sampling is not ideal. To stick with DHKEM's rejection sampling, we need to import HPKE idiosyncratic Extract/Expand and labelling. Also we need to pass that label correctly. That seems way too messy.\n\nGiven wide reduction is easier to specify and test, I'd prefer that.",
          "createdAt": "2025-09-02T08:08:31Z",
          "updatedAt": "2025-09-02T08:12:39Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "NONE",
          "body": "> Given a 48 byte scalar s, split it as `s = a 2^256 + b`, where `b<2^256`. Clearly `s mod p = ((a mod p) (2^256 mod p) + (b mod p) mod p)`. Hardcoding (2^256 mod p), you only need the existing reduction, multiplication, addition and splitting.\n\n[I do like that trick](https://words.filippo.io/wide-reduction/), yes :)\n\n> I'd say this is not too hard at all, and easier to test than rejection sampling.\n\nReduction is a bit easier to test, agreed. As I said there are pros and cons to both, and I am not expressing a universal preference. The point is that HPKE already requires rejection sampling and the associated tests.\n\n> having two different ways to do rejection sampling is not ideal.\n\nAgreed aesthetically, but in terms of what is required of the underlying ECC implementation, every rejection sampling is the same: it just needs SetBytesOrError.\n\n> To stick with DHKEM's rejection sampling, we need to import HPKE idiosyncratic Extract/Expand and labelling. Also we need to pass that label correctly. That seems way too messy.\n\nYeah, let's definitely not import the actual HPKE flavor.\n\n(This all would not be necessary if prime order groups were ever specified as an abstraction that includes scalar and element maps from uniform bytes, like ristretto255 does, but I guess it is way too late to complain about that.)",
          "createdAt": "2025-09-02T12:38:06Z",
          "updatedAt": "2025-09-02T12:38:06Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "On the one hand, given that HPKE is a major target here, I agree that we should reuse algorithms from there as much as possible.  On the other hand, if we're going to deviate enough that actual code reuse won't work, we might as well do a simpler thing.\n\nI'm not thrilled about either approach to rejection sampling.  Requiring a KDF/PRG is gross, but expanding the seed is also a little distasteful because it gets away from the idea that the seed is proportional the security level.\n\n[Bad idea: You don't need N*256 bits to generate N candidates.  You could do N+256 bits, just shifting bitwise.  Or just use 256 bits and rotate them.  Why did we use a PRG in the first place?]\n\nIf you adopt the \"don't care about keygen\" approach in https://github.com/cfrg/draft-irtf-cfrg-hybrid-kems/issues/77, we could actually punt this to the HPKE layer.  Hybrid KEM just cares that it gets two keys for the component algorithms, then HPKE could define the specific derivation scheme.",
          "createdAt": "2025-09-15T22:08:03Z",
          "updatedAt": "2025-09-15T22:08:03Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "NONE",
          "body": "> On the other hand, if we're going to deviate enough that actual code reuse won't work, we might as well do a simpler thing.\n\nDisagree with this. The specific flavor of rejection sampling is glue I am not very worried about writing twice. Wide reduction vs. set-or-reject are trickier lower-level APIs with constant timed-ness issues and per-curve details.\n\n(I am neutral-or-positive about the rest of the comment, though!)",
          "createdAt": "2025-09-15T23:05:37Z",
          "updatedAt": "2025-09-15T23:06:03Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "I can see that.  You could also probably do some light generic/functional stuff so that you only had to implement the rejection sampling loop once.\n\nSo we're back to the problem of how we generate the candidates...",
          "createdAt": "2025-09-15T23:16:23Z",
          "updatedAt": "2025-09-15T23:16:23Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "NONE",
          "body": "I suspect shifting or rotating might be (fine in practice but) hard to prove ok in theory: if you reject once, your next sample is not uniform, but biased by the necessarily high value of the bits you have.\n\nI am not sure why the seed needs to be proportional to the security level. The main argument against a wide seed IMHO is that most of the time 3/4 of the seed will be malleable for the same key, which is not great _if the seed is ever exposed_, but is it? AFAICT all exposed APIs of the hybrid KEM construction take PRG inputs.",
          "createdAt": "2025-09-15T23:30:30Z",
          "updatedAt": "2025-09-15T23:30:30Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "It seems pretty obvious that if U is a uniform random variable over N bits and P is a permutation of N-bit strings, then P(U) is also a uniform random variable over N bits.  The permutation just shuffles around the distribution, which ends up looking the same.  P(U) is not uniform conditioned on U, in fact it is determined, but that's also true if P is a PRG -- what's important for the cryptography is that the private key is uniformly random unless you know the seed.\n\nNonetheless, looking at the default implementations in [Rust](https://docs.rs/elliptic-curve/latest/src/elliptic_curve/scalar/nonzero.rs.html#45-54) and [Go](https://cs.opensource.google/go/go/+/master:src/crypto/internal/fips140/ecdh/ecdh.go;l=139?q=GenerateKey&ss=go%2Fgo), going back to the RNG is the done thing.  The Golang one also notes that this is recommended in [NIST SP800-56A](https://cs.opensource.google/go/go/+/master:src/crypto/internal/fips140/ecdh/ecdh.go;l=139?q=GenerateKey&ss=go%2Fgo).",
          "createdAt": "2025-09-18T01:03:53Z",
          "updatedAt": "2025-09-18T01:03:53Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "That gets us back to the RNG || expanded-key dichotomy.  Thinking on this a bit further, I think the RNG version could work OK.  We could define the group not as `P256`, but as `P256+SHA3_256`, and then we can use use the hash function to make new candidates however we like.",
          "createdAt": "2025-09-18T01:06:50Z",
          "updatedAt": "2025-09-18T01:06:50Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOMmh5WM6UNhHg",
      "title": "Copy/paste text from generic document",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/1",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Mostly literally a copy/paste.  I added a little bit of introductory text at the top because there wasn't anything.",
      "createdAt": "2025-04-28T18:16:20Z",
      "updatedAt": "2025-05-01T14:47:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "ac68b752be2bf668d88c068a2188582b4804ce80",
      "headRepository": "bifurcation/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "copy-paste",
      "headRefOid": "85e4ffca1549384a0296f8815d6a74af458fc5c9",
      "closedAt": "2025-05-01T14:47:16Z",
      "mergedAt": "2025-05-01T14:47:16Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "17d1fc266c555992b0c167f275e7a72b5e35f71d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM6nfH8F",
          "commit": {
            "abbreviatedOid": "85e4ffc"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-01T14:47:07Z",
          "updatedAt": "2025-05-01T14:47:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 3,
      "id": "PR_kwDOMmh5WM6ZCOhf",
      "title": "Align with the general framework and abstractions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/3",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This change aligns the concrete hybrid KEMs with the generic framework specified in -hybrid-kems, allowing them to be [used in HPKE](https://github.com/hpkewg/hpke-pq/pull/5). It includes three hybrid KEM instances:\r\n\r\n- HNN3: P-256 + ML-KEM-768\r\n- HNN5: P-384 + ML-KEM-1024\r\n- HNX: X25519 + ML-KEM-768 (this is X-Wing)\r\n\r\nOthers can be added in the future if and when they're needed. ",
      "createdAt": "2025-06-04T14:17:52Z",
      "updatedAt": "2025-06-04T14:57:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "17d1fc266c555992b0c167f275e7a72b5e35f71d",
      "headRepository": "chris-wood/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "caw/align",
      "headRefOid": "dd0008b110160b952cdced0fbffe0704fcbc1d2b",
      "closedAt": "2025-06-04T14:57:37Z",
      "mergedAt": "2025-06-04T14:57:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a8e7414a669a7172ab29e41de8e4c3df0f1b6fec"
      },
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, it appears that I lack merge privileges here, working on getting that fixed...",
          "createdAt": "2025-06-04T14:54:44Z",
          "updatedAt": "2025-06-04T14:54:44Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(Merged for you)",
          "createdAt": "2025-06-04T14:57:42Z",
          "updatedAt": "2025-06-04T14:57:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM6srhUm",
          "commit": {
            "abbreviatedOid": "dd0008b"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @chris-wood.  This looks like good alignment with what's on `main` for the generic doc.  I have a couple minor comments, but I'll handle those in a follow-on.  Merging now so that we have a coherent reference stack for the HPKE WG meeting on Friday.",
          "createdAt": "2025-06-04T14:53:28Z",
          "updatedAt": "2025-06-04T14:53:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOMmh5WM6srk7s",
          "commit": {
            "abbreviatedOid": "dd0008b"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I do not agree with removing the KitchenSink instance, we need at least one concrete instance of each generic design per the design team ",
          "createdAt": "2025-06-04T14:57:43Z",
          "updatedAt": "2025-06-04T14:57:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOMmh5WM6ZC_g7",
      "title": "Align with the general framework and abstractions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/4",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updated per latest changes on https://github.com/cfrg/draft-irtf-cfrg-hybrid-kems/pull/22",
      "createdAt": "2025-06-04T15:28:35Z",
      "updatedAt": "2025-06-18T16:59:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "17d1fc266c555992b0c167f275e7a72b5e35f71d",
      "headRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "caw/align",
      "headRefOid": "c0ccc38120df6955754fc4295c64c772aa1b0938",
      "closedAt": "2025-06-18T16:59:25Z",
      "mergedAt": "2025-06-18T16:59:25Z",
      "mergedBy": "bifurcation",
      "mergeCommit": {
        "oid": "453f291004bccb23c6f63bdbbfef9f9adad681a0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM6sr-N9",
          "commit": {
            "abbreviatedOid": "f08eedf"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I do not agree with removing the KitchenSink instance nor the broad refactoring so far, hence reopening",
          "createdAt": "2025-06-04T15:29:07Z",
          "updatedAt": "2025-06-04T15:29:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOMmh5WM6ssGfY",
          "commit": {
            "abbreviatedOid": "f08eedf"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-04T15:38:24Z",
          "updatedAt": "2025-06-04T15:38:24Z",
          "comments": [
            {
              "originalPosition": 317,
              "body": "This language has not been introduced before and is inconsistent with the generic document and unfortunately collides with evolving notions/research on n-KDFs in general so I think we should avoid it",
              "createdAt": "2025-06-04T15:38:24Z",
              "updatedAt": "2025-06-04T15:38:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6tAxGL",
          "commit": {
            "abbreviatedOid": "f08eedf"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-05T22:15:50Z",
          "updatedAt": "2025-06-05T22:15:50Z",
          "comments": [
            {
              "originalPosition": 497,
              "body": "This label makes this instance non-interoperable with X-Wing ",
              "createdAt": "2025-06-05T22:15:50Z",
              "updatedAt": "2025-06-05T22:15:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6tvTI5",
          "commit": {
            "abbreviatedOid": "f08eedf"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-06-10T19:45:12Z",
          "updatedAt": "2025-06-10T19:48:18Z",
          "comments": [
            {
              "originalPosition": 535,
              "body": "I don't think we need to recite all the algorithms here.",
              "createdAt": "2025-06-10T19:45:13Z",
              "updatedAt": "2025-06-10T19:48:18Z"
            },
            {
              "originalPosition": 497,
              "body": "```suggestion\r\n* `Label` - `\\.//^\\`\r\n```\r\n\r\nThis should fix it, right @dconnolly ?",
              "createdAt": "2025-06-10T19:46:08Z",
              "updatedAt": "2025-06-10T19:48:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOMmh5WM6bekQE",
      "title": "draft-00 Release Candidate 1",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/5",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is fairly heavy edit to get the doc cleaned up for release.  There are no substantive changes, but the exposition is cleaned up in a few ways:\r\n\r\n* The separate sections for P-256/P-384 and ML-KEM-768/ML-KEM-1024 are combined to avoid duplication\r\n* The instantiations no longer recite the algorithms from the generic doc\r\n* Instead of the `HNN` names, I invented a new `{scheme}-{T}-{PQ}-{hash}` schema\r\n* The sketchy security notes at the end have been cut\r\n\r\nBefore release, we should make sure issues are filed for the TODOs.",
      "createdAt": "2025-06-20T21:48:27Z",
      "updatedAt": "2025-07-07T23:37:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "ba027e817dc93b50a015ada671cbc4c38ebe1bf3",
      "headRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "rc1",
      "headRefOid": "561f2c1969f2b554643cafbb1f7ad2adf390d98a",
      "closedAt": "2025-06-27T22:18:36Z",
      "mergedAt": "2025-06-27T22:18:36Z",
      "mergedBy": "bifurcation",
      "mergeCommit": {
        "oid": "bc349c5b009d2245dfa925a85b915208fa48f9ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM6wHokb",
          "commit": {
            "abbreviatedOid": "5d4fbd8"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-24T17:53:01Z",
          "updatedAt": "2025-06-24T17:53:01Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "Maybe include the PRG function name too? It's relevant to the security of the whole scheme and it'd be unfortunate if the KDF named got used for the PRG function unnecessarily (it's probably not a cryptographic strength issue but it's definitely an interop and protocol confusion issue)\r\n\r\nAlso (_hello welcome to the bikeshed paint shop_) maybe PQ before T, left to right? It aligns with the order left-to-right when constructing the actual KDF preimages and it signals the PQ part first which is the primary objective of the these constructions (achieve quantum security while belt and suspenders'ing with traditional fallback) ",
              "createdAt": "2025-06-24T17:53:01Z",
              "updatedAt": "2025-06-24T17:53:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6wKCbz",
          "commit": {
            "abbreviatedOid": "5d4fbd8"
          },
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-24T21:32:57Z",
          "updatedAt": "2025-06-24T21:32:57Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "I could live with that shade of bikeshed paint.  Starting to get a little long, but not terrible:\r\n\r\n* QSF-MLKEM-P256-SHA3-SHAKE\r\n* QSF-MLKEM-X25519-SHA3-SHAKE\r\n* QSF-MLKEM-P384-SHA3-SHAKE",
              "createdAt": "2025-06-24T21:32:57Z",
              "updatedAt": "2025-06-24T21:32:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOMmh5WM6cimPS",
      "title": "Add a section explaining how to select a framework",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/7",
      "state": "OPEN",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR adds a section about how concrete instantiations should be selected generally, and uses the framework to justify the instantiations in the document.\r\n\r\nFixes #6 ",
      "createdAt": "2025-06-28T17:07:23Z",
      "updatedAt": "2025-07-17T14:00:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "bc349c5b009d2245dfa925a85b915208fa48f9ea",
      "headRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "why",
      "headRefOid": "eca283609b0f30ec02970d6b8ad8fc0ce548aa07",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "i'm not sure if i love this because it only works if all the other things that affect choices like this (regulation/other standards on combiners, what component algorithms you are allowed to use / MUST use / have available, the trusted literature on security properties beyond IND-CCA for PQ KEMs, etc) are moot or not that salient, when they often can be the blocker to ever getting to the decision tree. I would pair this back a bunch, to more of a pros/cons vibe, than a 'follow this flow chart' vibe",
          "createdAt": "2025-06-30T06:51:32Z",
          "updatedAt": "2025-06-30T06:51:32Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "@br-hale wdyt? I may be pickled by the recent reviews on hybrid-signature-spectrums against the flow chart vibe but",
          "createdAt": "2025-06-30T07:48:59Z",
          "updatedAt": "2025-06-30T07:49:23Z"
        },
        {
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "body": "> @br-hale wdyt? I may be pickled by the recent reviews on hybrid-signature-spectrums against the flow chart vibe but\r\n\r\nYes, I concur that there isn't a logical basis for this pathway. I like the idea of a flowchart, but this one does not account for the decision variables. My concern is also that there isn't a research basis for this. There are claims of one performing better or security being good enough, but not a breakdown or backing for those claims.\r\n\r\nMy suggestion would be to take the bullet list that is at the start of the commit, and build out the logic that goes into each item in the list. E.g., if the claim is one is more efficient than the others, there should be a citation for that claim. If we are going to say the security fits the needs, then a list of security properties and why the selection is made that seems to fit most needs.",
          "createdAt": "2025-06-30T12:35:26Z",
          "updatedAt": "2025-06-30T12:35:26Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "I honestly don't know what there would be to cite / prove about efficiency.  The only difference is that some variants do more or less hashing.  Less hashing consumes fewer cycles, full stop.  We could provide some numbers to back this up in an appendix if you want, as we did [with SFrame](https://rfcs.online/rfcs/rfc9605.html#name-overhead-analysis).  But that wouldn't be rigorous, and in any case, it's not going to get done by the I-D deadline.\r\n\r\nI agree we should be sharper on the security trade-offs.  I was thinking that that would mainly get captured in the generic doc, since these are properties of the frameworks.\r\n\r\nThe flow-chart / guide here isn't meant to be normative (you MUST do this).  It's meant to guide people toward the right solutions.  If there are other considerations, by all means take them into account.  We're never going to address all the constraints people ever come up with.",
          "createdAt": "2025-06-30T12:48:26Z",
          "updatedAt": "2025-06-30T12:49:53Z"
        },
        {
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the issue right now isn't that there is a basis at all for the claims stated. It is said that this is the decision process used, but it is not clear that 1) there is grounding for this decision process and 2) that we even used it. ",
          "createdAt": "2025-06-30T12:56:30Z",
          "updatedAt": "2025-06-30T12:56:30Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "NONE",
          "body": "The only claim I think is not correct is QSF construction needing nominal group. I think everything else is correct, but writing a proof looks like it is going to be very annoying.",
          "createdAt": "2025-07-17T14:00:20Z",
          "updatedAt": "2025-07-17T14:00:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM6w_QZ_",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "rohanmahy",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-29T18:42:21Z",
          "updatedAt": "2025-06-29T18:42:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOMmh5WM6xFWPF",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:02:01Z",
          "updatedAt": "2025-06-30T12:02:01Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "\"constituents\" => components? Components is the more common term for the parts of a hybrid.",
              "createdAt": "2025-06-30T12:02:01Z",
              "updatedAt": "2025-06-30T12:02:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6xFdvs",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:13:16Z",
          "updatedAt": "2025-06-30T12:13:16Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Same update throughout",
              "createdAt": "2025-06-30T12:13:16Z",
              "updatedAt": "2025-06-30T12:13:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6xFes_",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:14:41Z",
          "updatedAt": "2025-06-30T12:14:41Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Why should it be considered the default?",
              "createdAt": "2025-06-30T12:14:41Z",
              "updatedAt": "2025-06-30T12:14:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6xFfZu",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:15:39Z",
          "updatedAt": "2025-06-30T12:15:39Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "What additional security requirements? (Again, this is information I think needs to be explicit in the draft to avoid raising such questions.)",
              "createdAt": "2025-06-30T12:15:39Z",
              "updatedAt": "2025-06-30T12:15:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6xFfpb",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:16:00Z",
          "updatedAt": "2025-06-30T12:16:00Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "We need citations to back up these claims.",
              "createdAt": "2025-06-30T12:16:00Z",
              "updatedAt": "2025-06-30T12:16:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6xFgfT",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:17:13Z",
          "updatedAt": "2025-06-30T12:17:13Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Clarification on punctuation: \"The PRE framework is faster than GHP in the cases where (1) encapsulation keys\r\n  are reused multiple times and (2) encapsulation keys are large; however it is slower\r\n  when these conditions are not true [XXXX].\" \r\nCitation needed.",
              "createdAt": "2025-06-30T12:17:13Z",
              "updatedAt": "2025-06-30T12:17:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6xFi6E",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:20:54Z",
          "updatedAt": "2025-06-30T12:20:55Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "The flowchart makes for a pretty visualization, but it needs to be backed up by research. It is built from claims but those claims are unsubstantiated as the document currently stands. ",
              "createdAt": "2025-06-30T12:20:55Z",
              "updatedAt": "2025-06-30T12:20:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM6xFqNp",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "br-hale",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T12:31:17Z",
          "updatedAt": "2025-06-30T12:31:17Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "I am not seeing a logical basis for this statement. ",
              "createdAt": "2025-06-30T12:31:17Z",
              "updatedAt": "2025-06-30T12:31:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM60k0Vk",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "ilaril",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-17T13:29:06Z",
          "updatedAt": "2025-07-17T13:29:07Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "At minimum (to get IND-CCA), the PQ component needs to be ciphertext second pre-image resistant.\r\n\r\nTo get LEAK-BIND-K-PK, the PQ component additionally needs to be LEAK-BIND-K-PK.",
              "createdAt": "2025-07-17T13:29:06Z",
              "updatedAt": "2025-07-17T13:29:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM60lIq3",
          "commit": {
            "abbreviatedOid": "eca2836"
          },
          "author": "ilaril",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-17T13:51:07Z",
          "updatedAt": "2025-07-17T13:51:07Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "AFAICT, The GHP paper does not even prove that if some combo is safe for QSF, it is also safe for GHP. One needs more general theorem to prove this statement. ",
              "createdAt": "2025-07-17T13:51:07Z",
              "updatedAt": "2025-07-17T13:51:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOMmh5WM6cjB2z",
      "title": "Add a reference implementation and test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/8",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR adds a Claude-coded reference implementation of the primitives and uses it to generate test vectors that go into the document.",
      "createdAt": "2025-06-28T19:33:12Z",
      "updatedAt": "2025-08-07T20:27:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "4f6ce977f57a54c51d5814f76a2b48dfb3bb4ce8",
      "headRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "ref-impl",
      "headRefOid": "91e978e31443210988ed144d37ad55fec265f92e",
      "closedAt": "2025-08-07T20:27:53Z",
      "mergedAt": "2025-08-07T20:27:53Z",
      "mergedBy": "bifurcation",
      "mergeCommit": {
        "oid": "ee686337b57917673d666c23eba79fecd7a539d0"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "woohoo cheers on merging in the generic impl",
          "createdAt": "2025-07-16T22:18:13Z",
          "updatedAt": "2025-07-16T22:18:13Z"
        },
        {
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "body": "Checked the test-vectors for all but the P384 QSF variant.",
          "createdAt": "2025-08-07T20:24:28Z",
          "updatedAt": "2025-08-07T20:24:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOMmh5WM6d1y3U",
      "title": "Name alignment and wrapping",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/13",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-07T23:38:20Z",
      "updatedAt": "2025-07-07T23:38:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "bc349c5b009d2245dfa925a85b915208fa48f9ea",
      "headRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "name-alignment",
      "headRefOid": "13e496da9ec9509a0ff9615225606a2c2486528a",
      "closedAt": "2025-07-07T23:38:47Z",
      "mergedAt": "2025-07-07T23:38:47Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "4f6ce977f57a54c51d5814f76a2b48dfb3bb4ce8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "PR_kwDOMmh5WM6geqj9",
      "title": "Remove KDF and PRG names from the hybrid KEM name",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/15",
      "state": "OPEN",
      "author": "rohanmahy",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "All of the example hybrid KEMs here use SHAKE-256 for PRG and SHA3-256 for KDF, respectively. Rather than have a very long name KEM, we should have a shorter name for the hybrid KEM by omitting these parameters. If we end up generating more hybrid KEMs with the same traditional and PQ KEM components, but different KDF/PRF, we can assign a short suffix afterwards to identify the other hybrid KEM by PRG and KDF variations",
      "createdAt": "2025-07-24T15:30:48Z",
      "updatedAt": "2025-09-12T18:51:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "4f6ce977f57a54c51d5814f76a2b48dfb3bb4ce8",
      "headRepository": "rohanmahy/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "patch-1",
      "headRefOid": "e5359e722bda7e0cb930e97f16b416efe3f5df06",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "rohanmahy",
          "authorAssociation": "NONE",
          "body": "We've had several people suggest variations of this suggestion on the list.\r\nI believe there might even be rough consensus to do this. You have not\r\nprovided a concrete reason why we shouldn't do it. (ex: what could go\r\nwrong).\r\nThe point is that there is a high cost in terms of mental energy and\r\ncomplications in publication for very long, complicated KEM names.\r\nTherefore there needs to be a very strong motivation to use such long\r\ncomplicated names, and to date that motivation has not materialized.\r\n\r\nthanks,\r\n-rohan\r\n\r\nOn Mon, Sep 1, 2025, 00:09 Deirdre Connolly ***@***.***>\r\nwrote:\r\n\r\n> ***@***.**** requested changes on this pull request.\r\n>\r\n> I don't think we should do this\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/15#pullrequestreview-3171815044>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AADSQPRPPCA65OVW6FHFXZ33QNXB7AVCNFSM6AAAAACCJGNGN2VHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZTCNZRHAYTKMBUGQ>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> <cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/15/review/3171815044@\r\n> github.com>\r\n>\r\n",
          "createdAt": "2025-09-01T04:41:09Z",
          "updatedAt": "2025-09-01T04:41:09Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "> We've had several people suggest variations of this suggestion on the list.\n> I believe there might even be rough consensus to do this. You have not\n> provided a concrete reason why we shouldn't do it. (ex: what could go\n> wrong).\n> The point is that there is a high cost in terms of mental energy and\n> complications in publication for very long, complicated KEM names.\n> Therefore there needs to be a very strong motivation to use such long\n> complicated names, and to date that motivation has not materialized.\n> \n> thanks,\n> -rohan\n> \n> On Mon, Sep 1, 2025, 00:09 Deirdre Connolly ***@***.***>\n> wrote:\n> \n> > ***@***.**** requested changes on this pull request.\n> >\n> > I don't think we should do this\n> >\n> > \u2014\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/15#pullrequestreview-3171815044>,\n> > or unsubscribe\n> > <https://github.com/notifications/unsubscribe-auth/AADSQPRPPCA65OVW6FHFXZ33QNXB7AVCNFSM6AAAAACCJGNGN2VHI2DSMVQWIX3LMV43YUDVNRWFEZLROVSXG5CSMV3GSZLXHMZTCNZRHAYTKMBUGQ>\n> > .\n> > You are receiving this because you authored the thread.Message ID:\n> > <cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/15/review/3171815044@\n> > github.com>\n> >\n> \n\nI have enumerated my objections to this in multiple places ",
          "createdAt": "2025-09-12T18:12:43Z",
          "updatedAt": "2025-09-12T18:12:43Z"
        },
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "What about new uniquely-identifying names, such as 'T-65', 'T-70', etc?",
          "createdAt": "2025-09-12T18:51:05Z",
          "updatedAt": "2025-09-12T18:51:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM69Dg6E",
          "commit": {
            "abbreviatedOid": "e5359e7"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think we should do this",
          "createdAt": "2025-08-31T22:09:15Z",
          "updatedAt": "2025-08-31T22:09:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOMmh5WM6irgYR",
      "title": "Adjust reference implementation to use (PQ, T) ordering",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/16",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Corresponds to https://github.com/cfrg/draft-irtf-cfrg-hybrid-kems/pull/70",
      "createdAt": "2025-08-08T00:49:33Z",
      "updatedAt": "2025-08-28T15:23:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "ee686337b57917673d666c23eba79fecd7a539d0",
      "headRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "pqt",
      "headRefOid": "1bbca4030d804939280c8636be0c414b436a4e8c",
      "closedAt": "2025-08-28T15:23:33Z",
      "mergedAt": "2025-08-28T15:23:33Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "af8e263ee22109c4768ee324ffe76ecb8167e44e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM66bTl0",
          "commit": {
            "abbreviatedOid": "1bbca40"
          },
          "author": "FiloSottile",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-18T10:06:44Z",
          "updatedAt": "2025-08-18T10:06:44Z",
          "comments": [
            {
              "originalPosition": 109,
              "body": "The new order matches https://www.ietf.org/archive/id/draft-connolly-cfrg-xwing-kem-08.html#section-5.4.1 \ud83d\udc4d ",
              "createdAt": "2025-08-18T10:06:44Z",
              "updatedAt": "2025-08-18T10:06:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOMmh5WM6irrEo",
      "title": "Use the uncompressed representation for NIST curve points",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/17",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-08-08T01:33:57Z",
      "updatedAt": "2025-08-28T15:22:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "ee686337b57917673d666c23eba79fecd7a539d0",
      "headRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "compress",
      "headRefOid": "ffa159142d1646ba3b82aa22e4a79fe2f677faf7",
      "closedAt": "2025-08-28T15:21:57Z",
      "mergedAt": "2025-08-28T15:21:57Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "9307a5299b77064b53401be11f6e8d218c86648b"
      },
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "COLLABORATOR",
          "body": "Now also uses seed format for ML-KEM decapsulation keys.",
          "createdAt": "2025-08-08T21:00:56Z",
          "updatedAt": "2025-08-08T21:00:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM65EE9r",
          "commit": {
            "abbreviatedOid": "0a4e46d"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-11T09:31:33Z",
          "updatedAt": "2025-08-11T09:32:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "`Nelem` below needs an update. Perhaps also add parenthetical that this includes the type byte.",
              "createdAt": "2025-08-11T09:31:33Z",
              "updatedAt": "2025-08-11T09:32:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOMmh5WM68rAbN",
          "commit": {
            "abbreviatedOid": "ffa1591"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-28T15:21:52Z",
          "updatedAt": "2025-08-28T15:21:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOMmh5WM6mITKu",
      "title": "s/HKDF-SHA-256/SHA3-256/",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/20",
      "state": "MERGED",
      "author": "bluegate010",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/issues/14.",
      "createdAt": "2025-08-31T00:09:45Z",
      "updatedAt": "2025-08-31T00:21:02Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "af8e263ee22109c4768ee324ffe76ecb8167e44e",
      "headRepository": "bluegate010/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "patch-1",
      "headRefOid": "f0ecb619bea1b94598751b8db83e21f5cb1f0ea9",
      "closedAt": "2025-08-31T00:21:02Z",
      "mergedAt": "2025-08-31T00:21:02Z",
      "mergedBy": "dconnolly",
      "mergeCommit": {
        "oid": "9cb24a9829ae0c1df176a2c966dba72afe76787e"
      },
      "comments": [
        {
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "body": "This makes the spec correctly align with the reference impl ",
          "createdAt": "2025-08-31T00:19:45Z",
          "updatedAt": "2025-08-31T00:19:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM69Bd6x",
          "commit": {
            "abbreviatedOid": "f0ecb61"
          },
          "author": "dconnolly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-31T00:19:21Z",
          "updatedAt": "2025-08-31T00:19:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOMmh5WM6mLVFh",
      "title": "Fix P-256/P-384 scalar moduli in reference implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-concrete-hybrid-kems/pull/21",
      "state": "OPEN",
      "author": "FiloSottile",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Fixes #18",
      "createdAt": "2025-08-31T18:50:46Z",
      "updatedAt": "2025-09-01T22:03:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-concrete-hybrid-kems",
      "baseRefName": "main",
      "baseRefOid": "46ff59b532ed6bfd47777e4306269334f84ae776",
      "headRepository": "FiloSottile/draft-irtf-cfrg-concrete-hybrid-kems",
      "headRefName": "main",
      "headRefOid": "9f25f46e12cb7e5c094b5772191d18d5088747ce",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOMmh5WM69JJFV",
          "commit": {
            "abbreviatedOid": "9f25f46"
          },
          "author": "bwesterb",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-01T11:32:05Z",
          "updatedAt": "2025-09-01T11:32:05Z",
          "comments": []
        }
      ]
    }
  ]
}